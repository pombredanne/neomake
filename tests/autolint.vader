Include: include/setup.vader

Execute (Autolinting):
  call neomake#configure#autolint('n', 10)

  if !has('timers')
    AssertNeomakeMessage 'Timer support is required for autolinting.', 0
  else
    AssertEqual &buftype, 'nofile'
    AssertNeomakeMessage 'autolint: skipping setup for buftype=nofile (bufnr='.bufnr('%').')'
    new
    let b:neomake_tempfile_enabled = 1
    setfiletype neomake_tests
    Save g:neomake_test_enabledmakers
    let g:neomake_test_enabledmakers = ['true']
    norm iline1
    norm oline2

    call g:NeomakeSetupAutocmdWrappers()

    doautocmd TextChanged
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 1

    " Should not run without changes to the buffer.
    doautocmd TextChanged
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 1

    " Should run with changes to the buffer.
    norm oline3
    doautocmd TextChanged
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 2

    norm oline4
    AssertEqual len(g:neomake_test_jobfinished), 2
    doautocmd TextChanged
    AssertEqual len(g:neomake_test_jobfinished), 2
    doautocmd TextChanged
    AssertEqual len(g:neomake_test_jobfinished), 2
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 3

    new
    doautocmd TextChanged
    sleep 50m
    AssertNeomakeMessage 'Nothing to make: no enabled file mode makers.'

    call neomake#configure#autolint('nw', 10)
    exe 'write' tempname()
    AssertNeomakeMessage 'Nothing to make: no enabled file mode makers.'

    bwipe!
    bwipe!
  endif

Execute (Autolinting: skips non-default buftypes):
  call neomake#configure#autolint('n', 10)
  if !has('timers')
    AssertNeomakeMessage 'Timer support is required for autolinting.', 0
  else
    new
    setfiletype neomake_tests
    Save g:neomake_test_enabledmakers
    let g:neomake_test_enabledmakers = ['true']
    set buftype=nofile

    call g:NeomakeSetupAutocmdWrappers()

    doautocmd TextChanged
    sleep 50m
    AssertEqual len(g:neomake_test_jobfinished), 0
    bwipe!
  endif

Execute (neomake#configure#autolint_for_buffer skips non-default buftypes):
  new
  set buftype=nofile
  call neomake#configure#autolint_for_buffer('n', 10)
  AssertNeomakeMessage 'autolint: skipping setup for buftype=nofile (bufnr='.bufnr('%').')'
  bwipe

Execute (neomake#configure#autolint_for_buffer handles current buffer only):
  call neomake#configure#autolint('')

  function! NeomakeTestsGetAutocommands()
    return neomake#utils#redir('au neomake_autolint_buffer * <buffer='.bufnr('%').'>')
  endfunction

  " Configure first buffer only.
  new
  call neomake#configure#autolint_for_buffer('n', 10)
  let autocmds = NeomakeTestsGetAutocommands()
  if has('timers')
    AssertNotEqual autocmds, "\n--- Auto-Commands ---"
  else
    AssertEqual NeomakeTestsGetAutocommands(), "\n--- Auto-Commands ---"
    AssertNeomakeMessage 'Timer support is required for autolinting.'
  endif

  " New buffer should not be configured.
  new
  AssertEqual NeomakeTestsGetAutocommands(), "\n--- Auto-Commands ---"

  " Now configure 2nd buffer.
  call neomake#configure#autolint_for_buffer('n', 2000)
  if has('timers')
    AssertNotEqual autocmds, "\n--- Auto-Commands ---"
  endif

  " First buffer should be still configured.
  wincmd p
  AssertEqual NeomakeTestsGetAutocommands(), autocmds

  bwipe
  wincmd p
  bwipe
